{"version":3,"sources":["Components/Greeting.js","Components/Modal.js","Components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Greeting","react_default","a","createElement","this","props","name","Component","Modal","show","className","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","maxWidth","margin","color","transform","children","onClick","onClose","React","Button","styles","background","colour","text","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggleModal","bind","assertThisInitialized","x","setState","_this2","Components_Greeting","Components_Button","Components_Modal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAWeA,0LAPT,OACEC,EAAAC,EAAAC,cAAA,oBAAYC,KAAKC,MAAMC,KAAvB,YAHeC,cCuDRC,mLAnDX,IAAIJ,KAAKC,MAAMI,KACb,OAAO,KA4BT,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WAAWC,MAzBN,CACpBC,SAAU,QACVC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,gBAAiB,kBACjBC,QAAS,KAmBPjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,QAAQC,MAfR,CACjBM,gBAAiB,OACjBE,aAAc,EACdC,SAAU,IACVC,OAAQ,SACRH,QAAS,GACTI,MAAO,QACPV,SAAU,WACVG,KAAM,MACNF,IAAK,MACLU,UAAW,0BAMNnB,KAAKC,MAAMmB,SAEZvB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACbT,EAAAC,EAAAC,cAAA,UAAQsB,QAASrB,KAAKC,MAAMqB,SAA5B,mBAtCQC,IAAMpB,WCWXqB,mLAVP,IAAIC,EAAS,CACTC,WAAY1B,KAAKC,MAAM0B,QAE3B,OACI9B,EAAAC,EAAAC,cAAA,UAAQsB,QAASrB,KAAKC,MAAMoB,QAASf,UAAU,UAAUC,MAAOkB,GAASzB,KAAKC,MAAM2B,aAN3EzB,aC4CN0B,cAvCb,SAAAA,EAAY5B,GAAO,IAAA6B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA/B,KAAA6B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA/B,KAAA+B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnC,KAAMC,KAEDmC,MAAQ,CAAEC,QAAQ,EAAOV,OAAQ,IAEtCG,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IALFA,2EAQPW,GACVzC,KAAK0C,SAAS,CACZL,QAASrC,KAAKoC,MAAMC,OACpBV,OAAQc,qCAIH,IAAAE,EAAA3C,KACP,OACEH,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAC6C,EAAD,CAAU1C,KAAK,YACfL,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aACbT,EAAAC,EAAAC,cAAC8C,EAAD,CAAQxB,QAAS,kBAAMsB,EAAKL,YAAY,QAAQV,KAAK,QAAQD,OAAO,QACpE9B,EAAAC,EAAAC,cAAC8C,EAAD,CAAQxB,QAAS,kBAAMsB,EAAKL,YAAY,SAASV,KAAK,QAAQD,OAAO,SACrE9B,EAAAC,EAAAC,cAAC8C,EAAD,CAAQxB,QAAS,kBAAMsB,EAAKL,YAAY,SAASV,KAAK,QAAQD,OAAO,SACrE9B,EAAAC,EAAAC,cAAC8C,EAAD,CAAQxB,QAAS,kBAAMsB,EAAKL,YAAY,UAAUV,KAAK,QAAQD,OAAO,WAGxE9B,EAAAC,EAAAC,cAAC+C,EAAD,CAAOzC,KAAML,KAAKoC,MAAMC,OACtBf,QAAStB,KAAKsC,aADhB,aAEYzC,EAAAC,EAAAC,cAAA,SAAIC,KAAKoC,MAAMT,QAF3B,WAGE9B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,qBA/BCI,aCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc1a1e2d.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass Greeting extends Component {\n    render() {\n      return (\n        <h1>Hello, {this.props.name}!</h1>\n      )\n    }\n  \n}\n\nexport default Greeting","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Modal extends React.Component {\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }\n\n    // The gray background\n    const backdropStyle = {\n      position: 'fixed',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // The modal \"window\"\n    const modalStyle = {\n      backgroundColor: '#fff',\n      borderRadius: 5,\n      maxWidth: 500,\n      margin: '0 auto',\n      padding: 30,\n      color: 'black',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      transform: 'translate(-50%, -50%)'\n    };\n\n    return (\n      <div className=\"backdrop\" style={backdropStyle}>\n        <div className=\"modal\" style={modalStyle}>\n          {this.props.children}\n\n          <div className=\"footer\">\n            <button onClick={this.props.onClose}>\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  show: PropTypes.bool,\n  children: PropTypes.node\n};\n\nexport default Modal;","import React, {Component} from 'react'\n\nclass Button extends Component {\n    render() {\n        let styles = {\n            background: this.props.colour\n        }\n        return (\n            <button onClick={this.props.onClick} className=\"my--btn\" style={styles}>{this.props.text}</button>\n        )\n    }\n  \n}\n\nexport default Button","import React, { Component } from 'react';\nimport './App.css';\nimport Greeting from './Components/Greeting';\nimport Modal from './Components/Modal';\nimport Button from './Components/Button';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false, colour: \"\" };\n\n    this.toggleModal = this.toggleModal.bind(this);\n  };\n\n  toggleModal(x) {\n    this.setState({\n      isOpen: !this.state.isOpen,\n      colour: x\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Greeting name=\"Sanbron\"/>\n          <div className=\"me--btn-w\">\n            <Button onClick={() => this.toggleModal(\"red\")} text=\"Click\" colour=\"red\"/>\n            <Button onClick={() => this.toggleModal(\"blue\")} text=\"Click\" colour=\"blue\"/>\n            <Button onClick={() => this.toggleModal(\"grey\")} text=\"Click\" colour=\"grey\"/>\n            <Button onClick={() => this.toggleModal(\"green\")} text=\"Click\" colour=\"green\"/>\n          </div>\n\n          <Modal show={this.state.isOpen}\n            onClose={this.toggleModal}>\n            This is a <b>{this.state.colour}</b> button.\n            <br/><br/>\n          </Modal>\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}